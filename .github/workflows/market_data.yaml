name: Auto import towns market data

on:
  schedule:
    # Runs every 1 hour at 5 minutes past the hour (00:05, 01:05, 12:10 UTC, etc...)
    - cron: "58 * * * *"

  workflow_dispatch: # This enables manual triggering

jobs:
  api-request:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MERC_USER: ${{ secrets.MERC_USER }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

    steps:
      - name: Set up repository
        uses: actions/checkout@v3

      - name: Install jq (for JSON processing)
        run: sudo apt-get install jq

      - name: Read towns.json, send API requests with 0.20s delay, and save results only if all succeed
        run: |
          # Initialize variables
          SUCCESS=true
          responses=()

          # Read the towns.json file and extract town IDs, names, and locations
          TOWNS=$(jq -c '.[] | {id: .id, name: .name, location: .location}' assets/s2/towns.json)

          # Iterate over each town's data
          for town in $TOWNS; do
            id=$(echo $town | jq -r '.id')
            name=$(echo $town | jq -r '.name')
            location=$(echo $town | jq -r '.location')

            # Extract x and y coordinates from the location
            x=$(echo $location | jq -r '.x')
            y=$(echo $location | jq -r '.y')

            # Construct the API endpoint dynamically
            endpoint="https://play.mercatorio.io/api/towns/${id}/marketdata"

            # Get the current timestamp in milliseconds
            last_update=$(date +%s%3N)

            # Send the API request and capture the response status
            response=$(curl -s -w "%{http_code}" -o response_body.txt -X GET "$endpoint" -H "X-Merc-User: $MERC_USER" -H "Authorization: $AUTH_TOKEN")

            # Check if the response was successful (HTTP 200)
            if [[ "$response" == "200" ]]; then
              # If successful, append the response body to the responses array with town details and timestamp
              api_response=$(cat response_body.txt | jq --arg id "$id" --arg name "$name" --argjson location "{\"x\": $x, \"y\": $y}" --argjson last_update "$last_update" '. + {id: $id, name: $name, location: $location, last_update: $last_update}')
              responses+=("$api_response")
              echo "Request for town ID $id ($name) was successful"
            else
              # If any request fails, log the failure and mark the run as failed
              echo "Request for town ID $id ($name) failed with status $response"
              SUCCESS=false
            fi

            # Wait for 0.20 seconds before the next request
            sleep 0.20
          done

          # Check if all requests were successful
          if [ "$SUCCESS" = true ]; then
            # If all requests were successful, save the responses as a JSON array
            printf '%s\n' "${responses[@]}" | jq -s '.' > assets/s2/marketData.json
            echo "All requests were successful. Saved results to assets/s2/marketData.json."
          else
            # If any requests failed, do not save the results
            echo "Some requests failed. No changes saved."
            exit 1
          fi

      - name: Commit and push the JSON file if all requests succeeded
        if: always() # This runs only if the previous step succeeded
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/s2/marketData.json
          git commit -m "Updated marketData.json for season 2"
          git push
